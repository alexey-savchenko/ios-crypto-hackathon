// 
// AUTOGENERATED
// 

import Foundation

public struct BigMoney: Comparable {
    public let currency: String
    public let decimals: Int
    public let amount: Decimal
    
    public init(currency: String, decimals: Int, amount: Decimal) {
        self.currency = currency
        self.decimals = decimals
        self.amount = amount
    }
}

struct BigMoneyCreator: Creator {
    typealias RawType = [String: Any]
    typealias StrongType = BigMoney
    
    static func toRaw(from: BigMoney) -> [String: Any] {
        return [
            "currency": from.currency,
            "decimals": from.decimals,
            "amount": from.amount
        ]
    }
    
    static func from(_ rawValue: [String: Any]) throws -> BigMoney {
        let currency = try PrimitiveCreator<String>.fromAny(rawValue, "currency")
        let decimals = try PrimitiveCreator<Int>.fromAny(rawValue, "decimals")
        let amount = try DecimalCreator.fromAny(rawValue, "amount")
        
        return BigMoney(currency: currency, decimals: decimals, amount: amount)
    }
}

public func ==(lhs: BigMoney, rhs: BigMoney) -> Bool {
    return lhs.currency == rhs.currency && lhs.decimals == rhs.decimals && lhs.amount == rhs.amount
}

public func <(lhs: BigMoney, rhs: BigMoney) -> Bool {
    return lhs.amount < rhs.amount
}
