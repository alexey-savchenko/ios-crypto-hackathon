// 
// AUTOGENERATED
// 

import Foundation

public struct CryptoMarket {
    public let name: String
    public let baseCurrency: String
    public let quoteCurrency: String
    public let bestBid: Decimal
    public let bestAsk: Decimal
    public let lastUpdated: Date
}

extension CryptoMarket: Equatable {
    static public func ==(lhs: CryptoMarket, rhs: CryptoMarket) -> Bool {
        return lhs.name == rhs.name
    }
}

struct CryptoMarketCreator: Creator {
    typealias RawType = [String: Any]
    typealias StrongType = CryptoMarket
    
    static func toRaw(from: CryptoMarket) -> [String: Any] {
        fatalError()
    }
    
    static func from(_ rawValue: [String: Any]) throws -> CryptoMarket {
        let name = try PrimitiveCreator<String>.fromAny(rawValue, "name")
        let baseCurrency = try PrimitiveCreator<String>.fromAny(rawValue, "baseCurrency")
        let quoteCurrency = try PrimitiveCreator<String>.fromAny(rawValue, "quoteCurrency")
        
        let bestBid = try DecimalCreator.fromAny(rawValue, "bestBid")
        let bestAsk = try DecimalCreator.fromAny(rawValue, "bestAsk")

        let lastUpdated = try DateCreator.fromAny(rawValue, "lastUpdated")

        return CryptoMarket(name: name, baseCurrency: baseCurrency, quoteCurrency: quoteCurrency, bestBid: bestBid, bestAsk: bestAsk, lastUpdated: lastUpdated)
    }
}
